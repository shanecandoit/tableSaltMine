
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author s137p379
 */
public class JavascriptToaster extends javax.swing.JFrame {

	/**
	 * Creates new form JavascriptSteeper
	 */
	public JavascriptToaster() {
		setTitle("Javascript Toaster");
		style();
		initComponents();

		// development only
		listTables();

		// for ui
		//listModules();
		uiUpdateModules();
		//listFunctions();
		uiUpdateFunctions();
	}

	private void style() {
		try {
//			String metal = UIManager.getCrossPlatformLookAndFeelClassName();
			String look = UIManager.getSystemLookAndFeelClassName();
			System.out.println("look = " + look);
			UIManager.setLookAndFeel(look);
		} catch (Exception ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFunction = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListModule = new javax.swing.JList<>();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldFunctionName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneFunctionBody = new javax.swing.JTextPane();
        jTextFieldFunctionArgs = new javax.swing.JTextField();
        jTextFieldFunctionType = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldFunctionHash = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextPaneFunctionDef = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextPane7 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setPreferredSize(new java.awt.Dimension(120, 580));

        jButton2.setText("edit");

        jListFunction.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListFunction.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFunctionValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListFunction);

        jLabel5.setText("functions");

        jButton3.setText("add");

        jLabel11.setText("author / module");

        jListModule.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane7.setViewportView(jListModule);

        jButton5.setText("about");

        jButton6.setText("add");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(73, 73, 73))
        );

        getContentPane().add(jPanel2);

        jLabel2.setText("functionArguments");

        jLabel1.setText("functionName");

        jTextFieldFunctionName.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N

        jLabel3.setText("functionBody");

        jTextPaneFunctionBody.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jTextPaneFunctionBody.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextPaneFunctionBodyFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPaneFunctionBody);

        jTextFieldFunctionArgs.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N

        jTextFieldFunctionType.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N

        jLabel4.setText("functionReturnType");

        jButton1.setText("jButton1");

        jLabel12.setText("function hash:");

        jTextFieldFunctionHash.setEditable(false);
        jTextFieldFunctionHash.setText("jTextField4");

        jLabel15.setText("actual function definition (read-only)");

        jTextPaneFunctionDef.setEditable(false);
        jTextPaneFunctionDef.setBackground(new java.awt.Color(240, 240, 240));
        jScrollPane8.setViewportView(jTextPaneFunctionDef);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(jScrollPane8)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextFieldFunctionType, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldFunctionArgs, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldFunctionName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel12)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldFunctionHash, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFunctionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFunctionArgs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFunctionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFunctionHash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3);

        jLabel6.setText("test cases");

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList2);

        jLabel7.setText("description");

        jScrollPane4.setViewportView(jTextPane2);

        jLabel8.setText("test input");

        jScrollPane5.setViewportView(jTextPane3);

        jLabel9.setText("expected output");

        jScrollPane6.setViewportView(jTextPane4);

        jLabel10.setText("Result:");

        jButton4.setText("jButton4");

        jLabel13.setText("test suite hash:");

        jTextField5.setEditable(false);
        jTextField5.setText("jTextField5");

        jLabel19.setText("actual output");

        jTextPane7.setEditable(false);
        jTextPane7.setBackground(new java.awt.Color(240, 240, 240));
        jScrollPane11.setViewportView(jTextPane7);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(0, 164, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4)))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addGap(41, 41, 41)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListFunctionValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFunctionValueChanged
		// TODO add your handling code here:
		System.out.println("jListFunctionValueChanged()");
		if (evt.getValueIsAdjusting()) {
//			System.out.println(" adjusting");
//			String notPrevFunction = jListFunction.getSelectedValue();
//			System.out.println(" notPrevFunction = " + notPrevFunction);
		} else {
			String function = jListFunction.getSelectedValue();
			System.out.println(" function = " + function);

			uiUpdateChosenFunction(function);
		}
    }//GEN-LAST:event_jListFunctionValueChanged

    private void jTextPaneFunctionBodyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextPaneFunctionBodyFocusLost
        // TODO add your handling code here:
		System.out.println("jTextPaneFunctionBodyFocusLost");
		String functionBody = jTextPaneFunctionBody.getText();
		System.out.println("functionBody = " + functionBody);
    }//GEN-LAST:event_jTextPaneFunctionBodyFocusLost

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {


		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JavascriptToaster().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jListFunction;
    private javax.swing.JList<String> jListModule;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextFieldFunctionArgs;
    private javax.swing.JTextField jTextFieldFunctionHash;
    private javax.swing.JTextField jTextFieldFunctionName;
    private javax.swing.JTextField jTextFieldFunctionType;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JTextPane jTextPane7;
    private javax.swing.JTextPane jTextPaneFunctionBody;
    private javax.swing.JTextPane jTextPaneFunctionDef;
    // End of variables declaration//GEN-END:variables

	private void initFunctions() {
		System.out.println("initFunctions()");
		try {

			Connection conn = getDb();

			Statement stat = conn.createStatement();

			stat.executeUpdate("drop table if exists function;");
			stat.executeUpdate("create table function (name, args, type, body);");
			PreparedStatement prep = conn.prepareStatement(
					"insert into function values (?, ?, ?, ?);");

			prep.setString(1, "sort");
			prep.setString(2, "list");
			prep.setString(3, "sortedlist");
			prep.setString(4, "function sort( list ){ result=list.slice(0); result.sort(); return result; }");
			prep.addBatch();
			prep.setString(1, "max");
			prep.setString(2, "list");
			prep.setString(3, "elem");
			prep.setString(4, "function mx(list){ big=list[0]; for( i=0;i<list.length;i++ ){ n=list[i]; console.log('check '+n); if( n>big ){ console.log('new big '+n); big=n; }} return big;}");
			prep.addBatch();
			prep.setString(1, "addi");
			prep.setString(2, "i1, i2");
			prep.setString(3, "i3");
			prep.setString(4, "function addi(i1, i2){ return i1 + i2;}");
			prep.addBatch();

			conn.setAutoCommit(false);
			prep.executeBatch();
			conn.setAutoCommit(true);

			ResultSet rs = stat.executeQuery("select * from function;");
			while (rs.next()) {
				System.out.println("name = " + rs.getString("name"));
				System.out.println("args = " + rs.getString("args"));
				System.out.println("type = " + rs.getString("type"));
			}
			rs.close();
			conn.close();

		} catch (Exception ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	private Connection getDb() throws SQLException {
//		System.out.println("getDb()");
		String dbLocation = System.getProperty("user.home") + File.separator + "toast.db";
		Connection conn = DriverManager.getConnection("jdbc:sqlite:" + dbLocation);
		return conn;
	}

	private void listTables() {
		System.out.println("listTables()");
		try {
			Connection conn = getDb();

			Statement stat = conn.createStatement();
//			stat.executeUpdate(".tables");

//			ResultSet rs = stat.executeQuery("select * from .tables;");
//			ResultSet rs = stat.executeQuery(".tables");
			//https://stackoverflow.com/questions/82875/how-to-list-the-tables-in-an-sqlite-database-file-that-was-opened-with-attach
			ResultSet rs = stat.executeQuery("SELECT name FROM sqlite_master WHERE type='table'");
			while (rs.next()) {

//				System.out.println("name = " + rs.getString(0));
				String tableName = rs.getString(1);
				System.out.println(" tableName = " + tableName);

//				ResultSet rsInner = stat.executeQuery(".schema ");
//				ResultSet rsInner = stat.executeQuery(".schema "+tableName);
//				ResultSet rsInner = stat.executeQuery("PRAGMA table_info(" + tableName + ");");
//				while (rsInner.next()) {
////					System.out.println(" CursorName = " + rsInner.getCursorName());
//					System.out.println(" schema = " + rsInner.getString(1));// returns 0,1,2,...
//				}
			}
			rs.close();

//			stat.executeUpdate(".schema tablename");
		} catch (SQLException ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	/**
	 * a module is a box of related functions create the module table and load
	 * sample data
	 */
	private void initModules() {
		System.out.println("initModules()");
		try {
			Connection conn = getDb();
			Statement stat = conn.createStatement();

			stat.executeUpdate("drop table if exists module;");
			stat.executeUpdate("create table module (name);");

			PreparedStatement prep = conn.prepareStatement(
					"insert into module values (?);");

			prep.setString(1, "omegaman");
			prep.execute();
		} catch (Exception ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void uiUpdateModules() {
		System.out.println("updateModules()");
		String[] modules = listModules();

		jListModule.setListData(modules);
	}

	private String[] listModules() {
		System.out.println("listModules()");
		try {
			Connection conn = getDb();
			Statement stat = conn.createStatement();

			initModules();

			List<String> modules = new ArrayList();

			ResultSet rs = stat.executeQuery("select * from module;");
			while (rs.next()) {
				String name = rs.getString("name");
				System.out.println(" name = " + name);
				modules.add(name);
			}
			return modules.toArray(new String[modules.size()]);

		} catch (SQLException ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
			return null;
		}
	}

	private void uiUpdateFunctions() {
		System.out.println("updateFunctions()");
		String[] functions = listFunctionNames();

		jListFunction.setListData(functions);
	}

	private String[] listFunctionNames() {
		System.out.println("listFunctionNames()");
		try {
			Connection conn = getDb();
			Statement stat = conn.createStatement();

			//
			initFunctions();

//			List<Map<String, String>> functions = new ArrayList();
			List<String> functionNames = new ArrayList();

			ResultSet rs = stat.executeQuery("select * from function;");
			while (rs.next()) {

//				Map row = new HashMap();
				String name = rs.getString("name");
				String args = rs.getString("args");
				String type = rs.getString("type");

				System.out.println(" name = " + name);
				System.out.println(" args = " + args);
				System.out.println(" type = " + type);

//				row.put("name", name);
//				row.put("args", name);
//				row.put("type", name);
//				functions.add(row);
				functionNames.add(name);
			}
			//return functions.toArray();
			//return functions.toArray(new String[functions.size()]);
			return functionNames.toArray(new String[functionNames.size()]);

		} catch (SQLException ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
			return null;
		}
	}

	private List<Map<String, String>> listFunctions() {
		System.out.println("listFunctionNames()");
		try {
			Connection conn = getDb();
			Statement stat = conn.createStatement();

			//initFunctions();
			List<Map<String, String>> functions = new ArrayList();

			ResultSet rs = stat.executeQuery("select * from function;");
			while (rs.next()) {

				Map row = new HashMap();

				String name = rs.getString("name");
				String args = rs.getString("args");
				String type = rs.getString("type");

				System.out.println(" name = " + name);
				System.out.println(" args = " + args);
				System.out.println(" type = " + type);

				row.put("name", name);
				row.put("args", name);
				row.put("type", name);

				functions.add(row);
			}
			return functions;

		} catch (SQLException ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
			return null;
		}
	}

	private void uiUpdateChosenFunction(String fName) {
		// what ui needs updated?
		jTextFieldFunctionName.setText(fName);
		jTextFieldFunctionArgs.setText(dbFunctionArgs(fName));
		jTextFieldFunctionType.setText(dbFunctionType(fName));
		jTextPaneFunctionBody.setText(dbFunctionBody(fName));

		// readonly
		jTextFieldFunctionHash.setText(dbFunctionHash(fName));
		jTextPaneFunctionDef.setText(dbFunctionDef(fName));

	}

	private String dbFunctionArgs(String functionName) {
		System.out.println("functionArgs(String functionName) functionName = " + functionName);
		String args = null;
		try {
			Connection conn = getDb();

			PreparedStatement prep = conn.prepareStatement(
					"select args from function where name in (?);");

			prep.setString(1, functionName);
			ResultSet rs = prep.executeQuery();
			while (rs.next()) {
				args = rs.getString("args");
				System.out.println(" args = " + args);
			}
			rs.close();
			conn.close();

		} catch (Exception ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}
		return args;
	}

	private String dbFunctionType(String functionName) {
		System.out.println("functionType(String functionName) functionName = " + functionName);
		String type = null;
		try {
			Connection conn = getDb();

			PreparedStatement prep = conn.prepareStatement(
					"select type from function where name in (?);");

			prep.setString(1, functionName);
			ResultSet rs = prep.executeQuery();
			while (rs.next()) {
				type = rs.getString("type");
				System.out.println(" type = " + type);
			}
			rs.close();
			conn.close();

		} catch (Exception ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}
		return type;
	}

	private String dbFunctionBody(String functionName) {
		System.out.println("functionType(String functionName) functionName = " + functionName);
		String body = null;
		try {
			Connection conn = getDb();

			PreparedStatement prep = conn.prepareStatement(
					"select body from function where name in (?);");

			prep.setString(1, functionName);
			ResultSet rs = prep.executeQuery();
			while (rs.next()) {
				body = rs.getString("body");
				System.out.println(" body = " + body);
			}
			rs.close();
			conn.close();

		} catch (Exception ex) {
			Logger.getLogger(JavascriptToaster.class.getName()).log(Level.SEVERE, null, ex);
		}

		body = cleanupBody( body );

		return body;
	}

	private String dbFunctionHash(String functionName) {
		return null;
	}

	private String dbFunctionDef(String functionName) {
		return null;
	}

	private String cleanupBody(String body) {
		System.out.println("cleanupBody(String body) body = "+body);
		body = body.replace("{", "{\n");
		System.out.println("body1 = " + body);
		String[] lines = body.split("\n");
		for( String line:lines ){
			if( !line.contains("for") ){
				line = line.replace("{", "{\n");
			}
		}
		body = String.join("\n", lines);
		System.out.println("body2 = " + body);
		return body;
	}
}
